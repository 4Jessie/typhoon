akka {

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
      "com.google.protobuf.Message" = proto
      "org.jinn.typhoon.akka.entity.InternalMsg"=java
    }
  }

  remote {
    netty.tcp {
      transport-class = "akka.remote.transport.netty.NettyTransport"
      transport-protocol = tcp
      hostname = "192.168.41.140"
      connection-timeout = 15 s
      tcp-nodelay = on
      tcp-keepalive = on
      server-socket-worker-pool {
              # Min number of threads to cap factor-based number to
              pool-size-min = 2

              # The pool size factor is used to determine thread pool size
              # using the following formula: ceil(available processors * factor).
              # Resulting size is then bounded by the pool-size-min and
              # pool-size-max values.
              pool-size-factor = 1.0

              # Max number of threads to cap factor-based number to
              pool-size-max = 2
            }

            # Used to configure the number of I/O worker threads on client sockets
            client-socket-worker-pool {
              # Min number of threads to cap factor-based number to
              pool-size-min = 2

              # The pool size factor is used to determine thread pool size
              # using the following formula: ceil(available processors * factor).
              # Resulting size is then bounded by the pool-size-min and
              # pool-size-max values.
              pool-size-factor = 1.0

              # Max number of threads to cap factor-based number to
              pool-size-max = 2
            }
    }
  }

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  loglevel = "INFO"
}